// 
"use client";
import Head from 'next/head';
import Image from 'next/image';
import axios from 'axios';
import { useState } from 'react';
import { BsSearch } from 'react-icons/bs';
import Weather from '@/components/Weather';
import Spinner from '@/components/Spinner';
import Title from '@/components/Title';
import dynamic from 'next/dynamic';

export default function Home() {
  const NEXT_PUBLIC_WEATHER_KEY='7c1329666ea58903d4da743deb4cee97';
  const NEXT_PUBLIC_ACCESS_TOKEN='pk.6b4c3c2e2db512c2776b0ae9b30f67e6';
  const Map = dynamic(() => import('@/components/Map'), { ssr: false });
  const [city, setCity] = useState('');
  const [weather, setWeather] = useState({});
  const [loading, setLoading] = useState(false);
  const [coordinates, setCoordinates] = useState([0, 0]);

  const locationIQUrl = `https://us1.locationiq.com/v1/search.php?key=${process.env.NEXT_PUBLIC_ACCESS_TOKEN}&q=${city}&format=json`;
  const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;

  const fetchWeather = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const weatherResponse = await axios.get(url);
      setWeather(weatherResponse.data);

      const locationResponse = await axios.get(locationIQUrl);
      if (locationResponse.data && locationResponse.data.length > 0) {
        const { lat, lon } = locationResponse.data[0];
        setCoordinates([lat, lon]);
      }
    } catch (error) {
      console.error("Error fetching data:", error);
    } finally {
      setLoading(false);
      setCity('');
    }
  };

  return (
    <div>
      <Head>
        <title>Weather - Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='absolute top-0 left-0 right-0 bottom-0 bg-black/10 z-[1]' />
      <Image
        src='https://images.unsplash.com/photo-1592210454359-9043f067919b?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D'
        layout='fill'
        className='object-cover'
        alt='Background'
      />
      <div className='relative flex flex-col justify-between items-center max-w-[500px] w-full m-auto pt-4 px-4 text-white z-10'>
        <Title />
        <form
          onSubmit={fetchWeather}
          className='flex justify-between items-center w-full m-auto p-3 bg-transparent border border-gray-300 text-white rounded-2xl'
        >
          <div>
            <input
              onChange={(e) => setCity(e.target.value)}
              className='bg-transparent border-none text-black focus:outline-none text-2xl'
              type='text'
              placeholder='Search city'
            />
          </div>
          <button type="submit">
            <BsSearch size={20} />
          </button>
        </form>
      </div>
      {loading ? (
        <Spinner />
      ) : (
        <div className='relative flex flex-col md:flex-row justify-between items-start max-w-[1000px] w-full m-auto pt-8 px-4 text-white z-10'>
          {weather.main && (
            <div className='flex-1 md:mr-4'>
              <Weather data={weather} />
            </div>
          )}
          {!loading && typeof window !== 'undefined' && coordinates[0] !== 0 && (
  <div className='flex-1 md:ml-4'>
    <Map city={city} coordinates={coordinates} />
  </div>
)}
        </div>
      )}
    </div>
  );
}
